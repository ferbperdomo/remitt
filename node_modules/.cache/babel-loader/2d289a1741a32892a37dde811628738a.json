{"ast":null,"code":"var _jsxFileName = \"/Users/cristian-perdomo/Desktop/development/remittance/client/src/context/theme.context.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext();\n\nfunction ThemeProviderWrapper(props) {\n  _s();\n\n  const [theme, setTheme] = useState('light');\n\n  const toggleTheme = () => {\n    if (theme === 'light') {\n      setTheme('dark');\n    } else {\n      setTheme('light');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      theme,\n      toggleTheme\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ThemeProviderWrapper, \"c/tiXTWXTQispzpG//dV5FX41vQ=\");\n\n_c = ThemeProviderWrapper;\nexport { ThemeContext, ThemeProviderWrapper };\n\nvar _c;\n\n$RefreshReg$(_c, \"ThemeProviderWrapper\");","map":{"version":3,"sources":["/Users/cristian-perdomo/Desktop/development/remittance/client/src/context/theme.context.js"],"names":["createContext","useState","ThemeContext","ThemeProviderWrapper","props","theme","setTheme","toggleTheme","children"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAwC,OAAxC;;AAEA,MAAMC,YAAY,gBAAGF,aAAa,EAAlC;;AAEA,SAASG,oBAAT,CAA8BC,KAA9B,EAAqC;AAAA;;AACnC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,OAAD,CAAlC;;AAEA,QAAMM,WAAW,GAAG,MAAM;AACxB,QAAIF,KAAK,KAAK,OAAd,EAAuB;AACrBC,MAAAA,QAAQ,CAAC,MAAD,CAAR;AACD,KAFD,MAEO;AACLA,MAAAA,QAAQ,CAAC,OAAD,CAAR;AACD;AACF,GAND;;AAQA,sBACE,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAAED,MAAAA,KAAF;AAASE,MAAAA;AAAT,KAA9B;AAAA,cACGH,KAAK,CAACI;AADT;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GAhBQL,oB;;KAAAA,oB;AAkBT,SAASD,YAAT,EAAuBC,oBAAvB","sourcesContent":["import { createContext, useState } from 'react'\n\nconst ThemeContext = createContext()\n\nfunction ThemeProviderWrapper(props) {\n  const [theme, setTheme] = useState('light')\n\n  const toggleTheme = () => {\n    if (theme === 'light') {\n      setTheme('dark')\n    } else {\n      setTheme('light')\n    }\n  }\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {props.children}\n    </ThemeContext.Provider>\n  )\n}\n\nexport { ThemeContext, ThemeProviderWrapper }"]},"metadata":{},"sourceType":"module"}